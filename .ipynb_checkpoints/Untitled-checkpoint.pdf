{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cc26ef13-bf91-47ed-a10a-779f64b7800d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-01-15 14:18:57.155114: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-01-15 14:18:57.155186: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-01-15 14:18:57.156324: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "2024-01-15 14:18:57.164139: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n",
      "To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "2024-01-15 14:18:58.257506: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Input\n",
    "from sklearn.model_selection import train_test_split\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os \n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "os.environ['CUDA_VISIBLE_DEVICES'] = '-1'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2abc9edd-deab-4842-ab90-fc631d28c8ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Charger votre jeu de donn√©es\n",
    "data = pd.read_csv('data.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ed31cab0-94d7-4575-8bee-aa2b37a59766",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Select only numeric columns\n",
    "numeric_data = data.select_dtypes(include=[np.number])\n",
    "\n",
    "# Split data into training and testing sets\n",
    "X_train, X_test = train_test_split(numeric_data, test_size=0.2, random_state=42)\n",
    "\n",
    "# Introduce missing values in 10% of the test data\n",
    "np.random.seed(42)\n",
    "mask = np.random.rand(*X_test.shape) < 0.1\n",
    "X_test[mask] = np.nan\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "853585d4-d43b-4cd6-bd36-f87ff5d17df8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(             ID     Price      Levy  Engine volume  Mileage(km)  Cylinders  \\\n",
       " 0      0.257296  1.013737 -1.035174      -0.759138    -0.033526  -0.481478   \n",
       " 1      0.242159  1.064187  0.322880       0.246162    -0.033153  -0.481478   \n",
       " 2     -0.628433  0.684133 -1.035174       2.368462    -0.030960   2.930531   \n",
       " 3      0.209792 -1.260593  1.803281       1.363162    -0.029356   1.224526   \n",
       " 4      0.249132  2.479508  0.310646      -0.647438    -0.030939  -0.481478   \n",
       " ...         ...       ...       ...            ...          ...        ...   \n",
       " 10212  0.096411 -0.898092  0.326376       0.246162    -0.032150  -0.481478   \n",
       " 10213  0.214280 -1.095791 -0.262638      -0.535738    -0.033678  -0.481478   \n",
       " 10214  0.260607  1.343341 -1.035174       0.246162    -0.032920  -0.481478   \n",
       " 10215  0.238972  1.178539  0.329872       0.246162    -0.032821  -0.481478   \n",
       " 10216  0.254507 -1.202997  0.852469       1.474862    -0.033496   1.224526   \n",
       " \n",
       "        Airbags  Fuel type_CNG  Fuel type_Diesel  Fuel type_Hybrid  \\\n",
       " 0      1.13810      -0.163811         -0.427387         -0.579121   \n",
       " 1     -0.68286      -0.163811          2.339797         -0.579121   \n",
       " 2      0.22762      -0.163811         -0.427387         -0.579121   \n",
       " 3      1.13810      -0.163811          2.339797         -0.579121   \n",
       " 4     -0.68286      -0.163811          2.339797         -0.579121   \n",
       " ...        ...            ...               ...               ...   \n",
       " 10212  1.13810      -0.163811         -0.427387          1.726755   \n",
       " 10213  1.13810      -0.163811         -0.427387          1.726755   \n",
       " 10214  1.13810      -0.163811         -0.427387          1.726755   \n",
       " 10215  0.68286      -0.163811         -0.427387         -0.579121   \n",
       " 10216  1.13810      -0.163811         -0.427387         -0.579121   \n",
       " \n",
       "        Fuel type_Hydrogen  Fuel type_LPG  Fuel type_Petrol  \\\n",
       " 0               -0.009894      -0.131241          0.909975   \n",
       " 1               -0.009894      -0.131241         -1.098931   \n",
       " 2               -0.009894      -0.131241          0.909975   \n",
       " 3               -0.009894      -0.131241         -1.098931   \n",
       " 4               -0.009894      -0.131241         -1.098931   \n",
       " ...                   ...            ...               ...   \n",
       " 10212           -0.009894      -0.131241         -1.098931   \n",
       " 10213           -0.009894      -0.131241         -1.098931   \n",
       " 10214           -0.009894      -0.131241         -1.098931   \n",
       " 10215           -0.009894      -0.131241          0.909975   \n",
       " 10216           -0.009894      -0.131241          0.909975   \n",
       " \n",
       "        Fuel type_Plug-in Hybrid  \n",
       " 0                     -0.065011  \n",
       " 1                     -0.065011  \n",
       " 2                     -0.065011  \n",
       " 3                     -0.065011  \n",
       " 4                     -0.065011  \n",
       " ...                         ...  \n",
       " 10212                 -0.065011  \n",
       " 10213                 -0.065011  \n",
       " 10214                 -0.065011  \n",
       " 10215                 -0.065011  \n",
       " 10216                 -0.065011  \n",
       " \n",
       " [10217 rows x 14 columns],\n",
       "             ID     Price      Levy  Engine volume  Mileage(km)  Cylinders  \\\n",
       " 0     0.098965 -0.255280  0.814017       1.363162    -0.031510   1.224526   \n",
       " 1     0.073983 -1.211195  1.651221       1.139762    -0.025274   1.224526   \n",
       " 2     0.215046       NaN -1.035174       0.134462          NaN  -0.481478   \n",
       " 3          NaN  0.206123  1.410023       1.363162    -0.030941   1.224526   \n",
       " 4          NaN -0.370684       NaN      -0.535738    -0.031455  -0.481478   \n",
       " ...        ...       ...       ...            ...          ...        ...   \n",
       " 2550  0.176976  1.555229  0.064203      -0.759138          NaN  -0.481478   \n",
       " 2551  0.241224  0.123722  1.181059      -0.870838    -0.031970  -0.481478   \n",
       " 2552       NaN  0.836428 -0.107083      -0.759138    -0.032516  -0.481478   \n",
       " 2553  0.004625  0.651131       NaN      -0.535738    -0.031831  -0.481478   \n",
       " 2554  0.233923 -0.799190 -1.035174       0.246162    -0.025547  -0.481478   \n",
       " \n",
       "       Airbags  Fuel type_CNG  Fuel type_Diesel  Fuel type_Hybrid  \\\n",
       " 0         NaN      -0.163811         -0.427387          1.726755   \n",
       " 1     1.13810      -0.163811         -0.427387          1.726755   \n",
       " 2    -0.68286      -0.163811          2.339797               NaN   \n",
       " 3    -1.59334      -0.163811         -0.427387          1.726755   \n",
       " 4    -1.13810      -0.163811          2.339797         -0.579121   \n",
       " ...       ...            ...               ...               ...   \n",
       " 2550 -0.68286      -0.163811         -0.427387         -0.579121   \n",
       " 2551 -0.22762      -0.163811         -0.427387          1.726755   \n",
       " 2552 -0.68286      -0.163811         -0.427387         -0.579121   \n",
       " 2553 -1.59334      -0.163811         -0.427387          1.726755   \n",
       " 2554 -0.22762      -0.163811         -0.427387         -0.579121   \n",
       " \n",
       "       Fuel type_Hydrogen  Fuel type_LPG  Fuel type_Petrol  \\\n",
       " 0                    NaN      -0.131241         -1.098931   \n",
       " 1              -0.009894      -0.131241         -1.098931   \n",
       " 2              -0.009894      -0.131241         -1.098931   \n",
       " 3              -0.009894      -0.131241         -1.098931   \n",
       " 4              -0.009894      -0.131241               NaN   \n",
       " ...                  ...            ...               ...   \n",
       " 2550           -0.009894      -0.131241          0.909975   \n",
       " 2551           -0.009894      -0.131241         -1.098931   \n",
       " 2552           -0.009894      -0.131241          0.909975   \n",
       " 2553           -0.009894      -0.131241         -1.098931   \n",
       " 2554           -0.009894      -0.131241               NaN   \n",
       " \n",
       "       Fuel type_Plug-in Hybrid  \n",
       " 0                    -0.065011  \n",
       " 1                    -0.065011  \n",
       " 2                    -0.065011  \n",
       " 3                    -0.065011  \n",
       " 4                    -0.065011  \n",
       " ...                        ...  \n",
       " 2550                 -0.065011  \n",
       " 2551                 -0.065011  \n",
       " 2552                 -0.065011  \n",
       " 2553                 -0.065011  \n",
       " 2554                 -0.065011  \n",
       " \n",
       " [2555 rows x 14 columns])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Initialize the StandardScaler\n",
    "scaler = StandardScaler()\n",
    "\n",
    "# Fit the scaler on the training data and transform both training and testing data\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "X_train_scaled = pd.DataFrame(X_train_scaled, columns=X_train.columns)\n",
    "X_test_scaled = pd.DataFrame(X_test_scaled, columns=X_test.columns)\n",
    "\n",
    "\n",
    "# The resulting X_train_scaled and X_test_scaled are now normalized versions of the original data\n",
    "X_train_scaled, X_test_scaled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "1903fc71-c0c0-4365-92a3-70aaf2bd4789",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing values in X_test: 3589\n"
     ]
    }
   ],
   "source": [
    "# Confirm that missing values were introduced\n",
    "print(\"Missing values in X_test:\", X_test.isna().sum().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c3cbc229-d941-4cde-bc25-8d2e992ea2a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ID                          263\n",
       "Price                       257\n",
       "Levy                        243\n",
       "Engine volume               265\n",
       "Mileage(km)                 252\n",
       "Cylinders                   276\n",
       "Airbags                     236\n",
       "Fuel type_CNG               258\n",
       "Fuel type_Diesel            271\n",
       "Fuel type_Hybrid            250\n",
       "Fuel type_Hydrogen          268\n",
       "Fuel type_LPG               255\n",
       "Fuel type_Petrol            226\n",
       "Fuel type_Plug-in Hybrid    269\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "038e3160-91a5-4a82-a4cd-c96434cf0297",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Custom model for imputing missing values using Keras\n",
    "class CustomImputerModel:\n",
    "    def __init__(self):\n",
    "        self.models = {}\n",
    "\n",
    "    def fit(self, X):\n",
    "        for col in X.columns:\n",
    "            features = X.drop(col, axis=1)\n",
    "            target = X[col]\n",
    "            non_missing = target.notna()\n",
    "            features_non_missing = features[non_missing]\n",
    "            target_non_missing = target[non_missing]\n",
    "\n",
    "            # Create a simple neural network model\n",
    "            model = Sequential([\n",
    "                Input(shape=(features_non_missing.shape[1],)),\n",
    "                Dense(128, activation='relu'),\n",
    "                Dense(128, activation='relu'),  # Added layer\n",
    "                Dense(64, activation='relu'),\n",
    "                Dense(1)\n",
    "            ])\n",
    "            model.compile(optimizer='adam', loss='mean_squared_error')\n",
    "            model.fit(features_non_missing, target_non_missing, epochs=50, batch_size=32, verbose=0)  # Increased epochs\n",
    "            self.models[col] = model\n",
    "\n",
    "    # def predict(self, X):\n",
    "    #     X_imputed = X.copy()\n",
    "    #     for col in X.columns:\n",
    "    #         missing = X[col].isna()\n",
    "    #         if missing.any():\n",
    "    #             X_missing = X_imputed[missing].drop(col, axis=1)\n",
    "    #             X_imputed.loc[missing, col] = self.models[col].predict(X_missing).flatten()\n",
    "    #     return X_imputed\n",
    "\n",
    "    def predict(self, X):\n",
    "        X_imputed = X.copy()\n",
    "        for iteration in range(10):  # Iterative imputation\n",
    "            for col in X.columns:\n",
    "                missing = X_imputed[col].isna()\n",
    "                if missing.any():\n",
    "                    X_missing = X_imputed[missing].drop(col, axis=1)\n",
    "                    X_imputed.loc[missing, col] = self.models[col].predict(X_missing).flatten()\n",
    "        return X_imputed\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "f8effda8-ab81-48f3-99cd-afb37a5bcb77",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initialize and fit the custom model\n",
    "imputer_model = CustomImputerModel()\n",
    "imputer_model.fit(X_train)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "ab8d8eff-8d14-4e7f-81e5-88e826aca3ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Price</th>\n",
       "      <th>Levy</th>\n",
       "      <th>Engine volume</th>\n",
       "      <th>Mileage(km)</th>\n",
       "      <th>Cylinders</th>\n",
       "      <th>Airbags</th>\n",
       "      <th>Fuel type_CNG</th>\n",
       "      <th>Fuel type_Diesel</th>\n",
       "      <th>Fuel type_Hybrid</th>\n",
       "      <th>Fuel type_Hydrogen</th>\n",
       "      <th>Fuel type_LPG</th>\n",
       "      <th>Fuel type_Petrol</th>\n",
       "      <th>Fuel type_Plug-in Hybrid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1516</th>\n",
       "      <td>45650429.0</td>\n",
       "      <td>9879.0</td>\n",
       "      <td>1058.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>157211.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2420</th>\n",
       "      <td>45624752.0</td>\n",
       "      <td>784.0</td>\n",
       "      <td>1537.0</td>\n",
       "      <td>3.3</td>\n",
       "      <td>472304.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9726</th>\n",
       "      <td>45769741.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1372</th>\n",
       "      <td>NaN</td>\n",
       "      <td>14269.0</td>\n",
       "      <td>1399.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>186005.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8296</th>\n",
       "      <td>NaN</td>\n",
       "      <td>8781.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.8</td>\n",
       "      <td>160000.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              ID    Price    Levy  Engine volume  Mileage(km)  Cylinders  \\\n",
       "1516  45650429.0   9879.0  1058.0            3.5     157211.0        6.0   \n",
       "2420  45624752.0    784.0  1537.0            3.3     472304.0        6.0   \n",
       "9726  45769741.0      NaN     0.0            2.4          NaN        4.0   \n",
       "1372         NaN  14269.0  1399.0            3.5     186005.0        6.0   \n",
       "8296         NaN   8781.0     NaN            1.8     160000.0        4.0   \n",
       "\n",
       "      Airbags  Fuel type_CNG  Fuel type_Diesel  Fuel type_Hybrid  \\\n",
       "1516      NaN            0.0               0.0               1.0   \n",
       "2420     12.0            0.0               0.0               1.0   \n",
       "9726      4.0            0.0               1.0               NaN   \n",
       "1372      0.0            0.0               0.0               1.0   \n",
       "8296      2.0            0.0               1.0               0.0   \n",
       "\n",
       "      Fuel type_Hydrogen  Fuel type_LPG  Fuel type_Petrol  \\\n",
       "1516                 NaN            0.0               0.0   \n",
       "2420                 0.0            0.0               0.0   \n",
       "9726                 0.0            0.0               0.0   \n",
       "1372                 0.0            0.0               0.0   \n",
       "8296                 0.0            0.0               NaN   \n",
       "\n",
       "      Fuel type_Plug-in Hybrid  \n",
       "1516                       0.0  \n",
       "2420                       0.0  \n",
       "9726                       0.0  \n",
       "1372                       0.0  \n",
       "8296                       0.0  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "a1ffcdc8-2ed4-4a27-a3a6-a7d34b168a53",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9/9 [==============================] - 0s 3ms/step\n",
      "9/9 [==============================] - 0s 2ms/step\n",
      "8/8 [==============================] - 0s 2ms/step\n",
      "9/9 [==============================] - 0s 2ms/step\n",
      "8/8 [==============================] - 0s 2ms/step\n",
      "9/9 [==============================] - 0s 2ms/step\n",
      "8/8 [==============================] - 0s 2ms/step\n",
      "9/9 [==============================] - 0s 2ms/step\n",
      "9/9 [==============================] - 0s 2ms/step\n",
      "8/8 [==============================] - 0s 4ms/step\n",
      "9/9 [==============================] - 0s 2ms/step\n",
      "8/8 [==============================] - 0s 2ms/step\n",
      "8/8 [==============================] - 0s 2ms/step\n",
      "9/9 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 4ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 3ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 3ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 3ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 3ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 3ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 3ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 4ms/step\n",
      "7/7 [==============================] - 0s 3ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 3ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 3ms/step\n",
      "6/6 [==============================] - 0s 4ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 3ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 3ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 3ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 6ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 3ms/step\n",
      "6/6 [==============================] - 0s 3ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 3ms/step\n",
      "7/7 [==============================] - 0s 3ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 5ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 3ms/step\n",
      "6/6 [==============================] - 0s 3ms/step\n",
      "7/7 [==============================] - 0s 3ms/step\n",
      "6/6 [==============================] - 0s 3ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 3ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 3ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 3ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 4ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 3ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 3ms/step\n",
      "6/6 [==============================] - 0s 3ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 3ms/step\n",
      "7/7 [==============================] - 0s 5ms/step\n",
      "6/6 [==============================] - 0s 3ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 3ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 3ms/step\n",
      "6/6 [==============================] - 0s 3ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 3ms/step\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 4ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "6/6 [==============================] - 0s 2ms/step\n",
      "7/7 [==============================] - 0s 3ms/step\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Price</th>\n",
       "      <th>Levy</th>\n",
       "      <th>Engine volume</th>\n",
       "      <th>Mileage(km)</th>\n",
       "      <th>Cylinders</th>\n",
       "      <th>Airbags</th>\n",
       "      <th>Fuel type_CNG</th>\n",
       "      <th>Fuel type_Diesel</th>\n",
       "      <th>Fuel type_Hybrid</th>\n",
       "      <th>Fuel type_Hydrogen</th>\n",
       "      <th>Fuel type_LPG</th>\n",
       "      <th>Fuel type_Petrol</th>\n",
       "      <th>Fuel type_Plug-in Hybrid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.098965</td>\n",
       "      <td>-0.255280</td>\n",
       "      <td>0.814017</td>\n",
       "      <td>1.363162</td>\n",
       "      <td>-0.031510</td>\n",
       "      <td>1.224526</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.163811</td>\n",
       "      <td>-0.427387</td>\n",
       "      <td>1.726755</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.131241</td>\n",
       "      <td>-1.098931</td>\n",
       "      <td>-0.065011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.073983</td>\n",
       "      <td>-1.211195</td>\n",
       "      <td>1.651221</td>\n",
       "      <td>1.139762</td>\n",
       "      <td>-0.025274</td>\n",
       "      <td>1.224526</td>\n",
       "      <td>1.13810</td>\n",
       "      <td>-0.163811</td>\n",
       "      <td>-0.427387</td>\n",
       "      <td>1.726755</td>\n",
       "      <td>-0.009894</td>\n",
       "      <td>-0.131241</td>\n",
       "      <td>-1.098931</td>\n",
       "      <td>-0.065011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.215046</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-1.035174</td>\n",
       "      <td>0.134462</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.481478</td>\n",
       "      <td>-0.68286</td>\n",
       "      <td>-0.163811</td>\n",
       "      <td>2.339797</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.009894</td>\n",
       "      <td>-0.131241</td>\n",
       "      <td>-1.098931</td>\n",
       "      <td>-0.065011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>181660.328125</td>\n",
       "      <td>0.206123</td>\n",
       "      <td>1.410023</td>\n",
       "      <td>1.363162</td>\n",
       "      <td>-0.030941</td>\n",
       "      <td>1.224526</td>\n",
       "      <td>-1.59334</td>\n",
       "      <td>-0.163811</td>\n",
       "      <td>-0.427387</td>\n",
       "      <td>1.726755</td>\n",
       "      <td>-0.009894</td>\n",
       "      <td>-0.131241</td>\n",
       "      <td>-1.098931</td>\n",
       "      <td>-0.065011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.370684</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.535738</td>\n",
       "      <td>-0.031455</td>\n",
       "      <td>-0.481478</td>\n",
       "      <td>-1.13810</td>\n",
       "      <td>-0.163811</td>\n",
       "      <td>2.339797</td>\n",
       "      <td>-0.579121</td>\n",
       "      <td>-0.009894</td>\n",
       "      <td>-0.131241</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.065011</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              ID     Price      Levy  Engine volume  Mileage(km)  Cylinders  \\\n",
       "0       0.098965 -0.255280  0.814017       1.363162    -0.031510   1.224526   \n",
       "1       0.073983 -1.211195  1.651221       1.139762    -0.025274   1.224526   \n",
       "2       0.215046       NaN -1.035174       0.134462          NaN  -0.481478   \n",
       "3  181660.328125  0.206123  1.410023       1.363162    -0.030941   1.224526   \n",
       "4            NaN -0.370684       NaN      -0.535738    -0.031455  -0.481478   \n",
       "\n",
       "   Airbags  Fuel type_CNG  Fuel type_Diesel  Fuel type_Hybrid  \\\n",
       "0      NaN      -0.163811         -0.427387          1.726755   \n",
       "1  1.13810      -0.163811         -0.427387          1.726755   \n",
       "2 -0.68286      -0.163811          2.339797               NaN   \n",
       "3 -1.59334      -0.163811         -0.427387          1.726755   \n",
       "4 -1.13810      -0.163811          2.339797         -0.579121   \n",
       "\n",
       "   Fuel type_Hydrogen  Fuel type_LPG  Fuel type_Petrol  \\\n",
       "0                 NaN      -0.131241         -1.098931   \n",
       "1           -0.009894      -0.131241         -1.098931   \n",
       "2           -0.009894      -0.131241         -1.098931   \n",
       "3           -0.009894      -0.131241         -1.098931   \n",
       "4           -0.009894      -0.131241               NaN   \n",
       "\n",
       "   Fuel type_Plug-in Hybrid  \n",
       "0                 -0.065011  \n",
       "1                 -0.065011  \n",
       "2                 -0.065011  \n",
       "3                 -0.065011  \n",
       "4                 -0.065011  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Impute missing values in the test set\n",
    "X_test_scaled_imputed = imputer_model.predict(X_test_scaled)\n",
    "\n",
    "# Show the first few rows of the imputed test set\n",
    "X_test_scaled_imputed.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "77339caf-31d2-4d45-a44c-11c2e04850a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NaN count after imputation: 2694\n"
     ]
    }
   ],
   "source": [
    "# Debugging: Check for NaN values after imputation\n",
    "nan_count_after = X_test_imputed.isna().sum().sum()\n",
    "print(\"NaN count after imputation:\", nan_count_after)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "b388c627-8fd1-4c6b-8db9-11716b2228c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "24.93730844246308"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "perc=  ((3589-nan_count_after)*100)/3589\n",
    "perc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "ded986a2-909b-4124-8c32-c49ef6e8f097",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test_imputed = scaler.inverse_transform(X_test_scaled_imputed)\n",
    "X_test_imputed = pd.DataFrame(X_test_imputed, columns=X_test.columns)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "be7d5a76-193c-4697-8d20-a9e275d4c43d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Price</th>\n",
       "      <th>Levy</th>\n",
       "      <th>Engine volume</th>\n",
       "      <th>Mileage(km)</th>\n",
       "      <th>Cylinders</th>\n",
       "      <th>Airbags</th>\n",
       "      <th>Fuel type_CNG</th>\n",
       "      <th>Fuel type_Diesel</th>\n",
       "      <th>Fuel type_Hybrid</th>\n",
       "      <th>Fuel type_Hydrogen</th>\n",
       "      <th>Fuel type_LPG</th>\n",
       "      <th>Fuel type_Petrol</th>\n",
       "      <th>Fuel type_Plug-in Hybrid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.565043e+07</td>\n",
       "      <td>9879.0</td>\n",
       "      <td>1058.000000</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.572110e+05</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.562475e+07</td>\n",
       "      <td>784.0</td>\n",
       "      <td>1537.000000</td>\n",
       "      <td>3.3</td>\n",
       "      <td>4.723040e+05</td>\n",
       "      <td>6.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.576974e+07</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9.156743e+10</td>\n",
       "      <td>14269.0</td>\n",
       "      <td>1399.000000</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.860050e+05</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>8781.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1.600000e+05</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2550</th>\n",
       "      <td>4.573061e+07</td>\n",
       "      <td>27105.0</td>\n",
       "      <td>629.000000</td>\n",
       "      <td>1.6</td>\n",
       "      <td>4.727737e+07</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2551</th>\n",
       "      <td>4.579665e+07</td>\n",
       "      <td>13485.0</td>\n",
       "      <td>1268.000000</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1.340000e+05</td>\n",
       "      <td>4.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2552</th>\n",
       "      <td>1.766527e+08</td>\n",
       "      <td>20266.0</td>\n",
       "      <td>531.000000</td>\n",
       "      <td>1.6</td>\n",
       "      <td>1.064000e+05</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2553</th>\n",
       "      <td>4.555346e+07</td>\n",
       "      <td>18503.0</td>\n",
       "      <td>632.666211</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1.410000e+05</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2554</th>\n",
       "      <td>4.578914e+07</td>\n",
       "      <td>4704.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.5</td>\n",
       "      <td>4.584950e+05</td>\n",
       "      <td>4.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.545727</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2555 rows √ó 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                ID    Price         Levy  Engine volume   Mileage(km)  \\\n",
       "0     4.565043e+07   9879.0  1058.000000            3.5  1.572110e+05   \n",
       "1     4.562475e+07    784.0  1537.000000            3.3  4.723040e+05   \n",
       "2     4.576974e+07      NaN     0.000000            2.4           NaN   \n",
       "3     9.156743e+10  14269.0  1399.000000            3.5  1.860050e+05   \n",
       "4              NaN   8781.0          NaN            1.8  1.600000e+05   \n",
       "...            ...      ...          ...            ...           ...   \n",
       "2550  4.573061e+07  27105.0   629.000000            1.6  4.727737e+07   \n",
       "2551  4.579665e+07  13485.0  1268.000000            1.5  1.340000e+05   \n",
       "2552  1.766527e+08  20266.0   531.000000            1.6  1.064000e+05   \n",
       "2553  4.555346e+07  18503.0   632.666211            1.8  1.410000e+05   \n",
       "2554  4.578914e+07   4704.0     0.000000            2.5  4.584950e+05   \n",
       "\n",
       "      Cylinders  Airbags  Fuel type_CNG  Fuel type_Diesel  Fuel type_Hybrid  \\\n",
       "0           6.0      NaN            0.0               0.0               1.0   \n",
       "1           6.0     12.0            0.0               0.0               1.0   \n",
       "2           4.0      4.0            0.0               1.0               NaN   \n",
       "3           6.0      0.0            0.0               0.0               1.0   \n",
       "4           4.0      2.0            0.0               1.0               0.0   \n",
       "...         ...      ...            ...               ...               ...   \n",
       "2550        4.0      4.0            0.0               0.0               0.0   \n",
       "2551        4.0      6.0            0.0               0.0               1.0   \n",
       "2552        4.0      4.0            0.0               0.0               0.0   \n",
       "2553        4.0      0.0            0.0               0.0               1.0   \n",
       "2554        4.0      6.0            0.0               0.0               0.0   \n",
       "\n",
       "      Fuel type_Hydrogen  Fuel type_LPG  Fuel type_Petrol  \\\n",
       "0                    NaN            0.0          0.000000   \n",
       "1                    0.0            0.0          0.000000   \n",
       "2                    0.0            0.0          0.000000   \n",
       "3                    0.0            0.0          0.000000   \n",
       "4                    0.0            0.0               NaN   \n",
       "...                  ...            ...               ...   \n",
       "2550                 0.0            0.0          1.000000   \n",
       "2551                 0.0            0.0          0.000000   \n",
       "2552                 0.0            0.0          1.000000   \n",
       "2553                 0.0            0.0          0.000000   \n",
       "2554                 0.0            0.0          0.545727   \n",
       "\n",
       "      Fuel type_Plug-in Hybrid  \n",
       "0                          0.0  \n",
       "1                          0.0  \n",
       "2                          0.0  \n",
       "3                          0.0  \n",
       "4                          0.0  \n",
       "...                        ...  \n",
       "2550                       0.0  \n",
       "2551                       0.0  \n",
       "2552                       0.0  \n",
       "2553                       0.0  \n",
       "2554                       0.0  \n",
       "\n",
       "[2555 rows x 14 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " X_test_imputed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "36bf32ed-c83e-4dcb-a2e7-819719e87e1c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Changes in X_test after imputation: ID                           67\n",
      "Price                       216\n",
      "Levy                         76\n",
      "Engine volume               178\n",
      "Mileage(km)                 670\n",
      "Cylinders                    65\n",
      "Airbags                      62\n",
      "Fuel type_CNG                68\n",
      "Fuel type_Diesel             58\n",
      "Fuel type_Hybrid             60\n",
      "Fuel type_Hydrogen           73\n",
      "Fuel type_LPG                68\n",
      "Fuel type_Petrol             47\n",
      "Fuel type_Plug-in Hybrid     66\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "def custom_compare(df1, df2):\n",
    "    # Ensure same columns and align indices\n",
    "    df1_aligned, df2_aligned = df1.align(df2, axis=1)\n",
    "    df1_aligned = df1_aligned.reset_index(drop=True)\n",
    "    df2_aligned = df2_aligned.reset_index(drop=True)\n",
    "\n",
    "    # Replace NaN in both DataFrames with a unique value for comparison\n",
    "    unique_value = -999999  # Choose a value that doesn't appear in your data\n",
    "    df1_filled = df1_aligned.fillna(unique_value)\n",
    "    df2_filled = df2_aligned.fillna(unique_value)\n",
    "\n",
    "    # Perform comparison\n",
    "    return df1_filled != df2_filled\n",
    "\n",
    "# Comparing the original and imputed DataFrames\n",
    "changes = custom_compare(X_test, X_test_imputed)\n",
    "print(\"Changes in X_test after imputation:\", changes.sum())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0797b64a-79cd-4495-b25d-92e9815f50f4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
